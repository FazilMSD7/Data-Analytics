Database -> Container that stores data, Handle large amt. of data, Secure instead of storing in files

SQL -> Lang. used to talk to database

DBMS -> Software that manages all req. and make priority which to execute first

SQL Server -> Physical machine where Database lives

Database Types -> 1. Realtional Db -> Tables where they are related(SQL) - MS SQL Server, MySQL, PostgreSQL
				  2. Key-Value -> Pairs of Keys and Values like Dict(NoSQL) - Redis, DynamoDB
				  3. Column Based -> Advanced, To search for data in col(NoSQL) - Apache Cassandra, Amazon Redshift
				  4. Graph -> Realtionship btw objects(NoSQL) - Neo$j
				  5. Document -> Fit in one page(NoSQL) - MongoDB
				  
Database Structure -> Server - Multiple db's(Sales) - Multiple Schemas(Columns : Orders, Customers)
					  Primary Key : each table has unique col. eg: Id
				      DataTypes : Numeric (INT, DECIMAL), Text (CHAR(fixed), VARCHAR(dynamic)), Data&Time (DATE, TIME)
					  
Types of SQL Commands -> 1. DDL(Data Definition Lang) - CREATE ALTER DROP
						 2. DML(Data Manipulation Lang) - INSERT, UPDATE, DELETE
						 3. DQL(Data Query Lang) - SELECT
						 
----------------------------------------------------------------------------------
				
JOINS : Inner, Left, Right, Full, Left Anti(Left + Where), Right Anti(Right + Where), Full Anti(Fill + Where), Cross Join
					
/* How to choose between Join Types	*/

Only matching : INNER JOIN

All Rows : 1. One side(master table) -> LEFT JOIN
		   2. Both side(master both) -> FULL JOIN

Only Unmatching : 1. One side(master table) -> LEFT ANTI JOIN(Left + Where)
				  2. Both side(master both) -> FULL ANTI JOIN(Full + Where)


** Try using Left Join, Avoid using Right join for any ** 


-- MULTIPLE TABLE JOINS (Joins more than 2 tables) -> Left Join + Where

If u need to match tables -> Use Left join + Where
If every tables matters -> User Inner join

----------------------------------------------------------------------------------

-- SET operators : combining rows from diff. tables

/* UNION, UNION ALL, INTERSECT, EXCEPT

/* query : select * from customers 'set op.' select * from orders

Rules :
1. SET operators can be used almost with all clauses WHERE | JOIN | GROUP BY | HAVING
   ORDER BY can be used only once atlast

   Eg: Select * from table..	UNION Select * from table..	Order by FirstName

2. No. of columns in each query must be the same. Eg: Select FirstName from.. UNION Select FirstName, LastName from.. -> X

3. Data types of columns in each query must be compatible. Eg: Select CustomerID.. UNION Select FirstName... -> X

4. Order of columns also should be same. Eg: Select LastName.. UNION Select EmployeeID.. -> X

5. Column name in result is determined from first query(select statement)


/* Quick Recap of Rules :
1. Order by can be used only once
2. Same No. of columns, Data types, Order of columns
3. First qury controls alias

/* Use Cases :
1. Combine similar info before analyzing

2. For DE -> DELTA DETECTION : Use 'Except' to get latest data from Data Resource and load into Data warehouse, 
                               by which we get newly added data instead of all

3. Data completeness check : 'Except' can be used to compare tables to detect discrepancies btw db's.
                              Result should be Empty. Table A 'EXCEPT' Table B
							  
NOTE : don't use '*' for select all bcz it will sometimes give issue but we can't see like interchange of cols.
	   so use col. name instead by select Table -> Right Click -> Select 1000 rows and copy paste the col_name	
       and include source table(new column) for better understanding
	   
----------------------------------------------------------------------------------

